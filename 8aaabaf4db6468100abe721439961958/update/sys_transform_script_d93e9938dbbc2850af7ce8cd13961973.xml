<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_transform_script">
    <sys_transform_script action="INSERT_OR_UPDATE">
        <active>true</active>
        <map display_value="Dealmaker Application Requirements Transform">3967d3f0dbe468100abe7214399619a2</map>
        <order>100</order>
        <script><![CDATA[(function runTransformScript(source, map, log, target /*undefined onStart*/ ) {
	
	var appSuiteDisplays = source.u_application_suites.toString().split(",");
	var appDisplays = source.u_applications.toString().split(",");
	
	var appSuiteSysIDs = [];
	var appSysIDs = [];
	
	for (var i = 0; i < appSuiteDisplays.length; i++) {
		
		// Get application suite sys_id
		var applicationSuiteGR = new GlideRecord("x_icir_dealmaker_application_suite");
		applicationSuiteGR.addQuery("acronym", appSuiteDisplays[i]);
		applicationSuiteGR.query();
		if (applicationSuiteGR.next()) {
			appSuiteSysIDs.push(String(applicationSuiteGR.getUniqueValue()));
		}
		
		
		// Get application sys_id
		var applicationGR = new GlideRecord("x_icir_dealmaker_application");
		applicationGR.addQuery("name", appDisplays[i]);
		applicationGR.query();
		if (applicationGR.next()) {
			appSysIDs.push(String(applicationGR.getUniqueValue()));
		}
		// OR create and get application sys_id
		else {
			var applicationGR2 = new GlideRecord("x_icir_dealmaker_application");
			applicationGR2.initialize();
			applicationGR2.name = appDisplays[i];
			appSysIDs.push(String(applicationGR2.insert()));
		}
	}
	
	

	// Create relationships between app suites and apps
	for (var i = 0; i < appSuiteSysIDs.length; i++) {

		var joinGR = new GlideRecord("x_icir_dealmaker_m2m_app_app_suite");
		joinGR.addQuery("application_suite", appSuiteSysIDs[i]);
		joinGR.addQuery("application", appSysIDs[i]);
		joinGR.query();
		if (!joinGR.next()) {
		
			joinGR.initialize();
			joinGR.application_suite = appSuiteSysIDs[i];
			joinGR.application = appSysIDs[i];
			joinGR.insert();
		}
	}
	
	
		
	// Create relationships between app requirements and apps
	for (var i = 0; i < appSysIDs.length; i++) {

		var joinGR = new GlideRecord("x_icir_dealmaker_m2m_app_requirement_app");
		joinGR.addQuery("application", appSysIDs[i]);
		joinGR.addQuery("application_requirement", target.sys_id);
		joinGR.query();
		if (!joinGR.next()) {

			joinGR.initialize();
			joinGR.application = appSysIDs[i];
			joinGR.application_requirement = target.sys_id;
			joinGR.insert();
		}
	}

})(source, map, log, target);

]]></script>
        <sys_class_name>sys_transform_script</sys_class_name>
        <sys_created_by>mike.cornell@infocenter.io</sys_created_by>
        <sys_created_on>2020-11-28 01:04:17</sys_created_on>
        <sys_id>d93e9938dbbc2850af7ce8cd13961973</sys_id>
        <sys_mod_count>3</sys_mod_count>
        <sys_name>onAfter</sys_name>
        <sys_package display_value="Dealmaker NOW" source="x_icir_dealmaker">8aaabaf4db6468100abe721439961958</sys_package>
        <sys_policy/>
        <sys_scope display_value="Dealmaker NOW">8aaabaf4db6468100abe721439961958</sys_scope>
        <sys_update_name>sys_transform_script_d93e9938dbbc2850af7ce8cd13961973</sys_update_name>
        <sys_updated_by>mike.cornell@infocenter.io</sys_updated_by>
        <sys_updated_on>2020-11-28 02:23:05</sys_updated_on>
        <when>onAfter</when>
    </sys_transform_script>
</record_update>
